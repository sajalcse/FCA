/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fca.gui;

import com.fca.lattice.CommonLattice;

import com.fca.utility.ShareResult;
import com.fca.operations.Relation;
import com.fca.utility.Utility;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author susmi
 */
public class MainWindow extends javax.swing.JFrame {

    ArrayList<String> source = new ArrayList<String>();
    ArrayList<String> target = new ArrayList<String>();
    int[][] matrix = null;
    int meetArray[][] = null;
    int joinArray[][] = null;
    int implicationArray[][] = null;
    int noOfElements = 0;

    /**
     * Creates new form NewJFrame
     */
    public MainWindow() {
        initComponents();
        jTableRelation.setShowGrid(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRelation = new javax.swing.JTable();
        jButtonLoadSource = new javax.swing.JButton();
        jButtonLoadTarget = new javax.swing.JButton();
        jButtonCreateRelation = new javax.swing.JButton();
        jComboBoxLatticeElement = new javax.swing.JComboBox<>();
        jLabelSourceFilePath = new javax.swing.JLabel();
        jLabelTargetPath = new javax.swing.JLabel();
        jButtonExecute = new javax.swing.JButton();
        jLabelSelectLatticeElement = new javax.swing.JLabel();
        jComboBoxSelectOperation = new javax.swing.JComboBox<>();
        jCheckBoxSplit = new javax.swing.JCheckBox();
        jButtonLoadLattice = new javax.swing.JButton();
        jLabelLatticePath = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableRelation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableRelation.setGridColor(new java.awt.Color(255, 51, 51));
        jTableRelation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRelationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableRelation);

        jButtonLoadSource.setText("Load Source");
        jButtonLoadSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadSourceActionPerformed(evt);
            }
        });

        jButtonLoadTarget.setText("Load Target");
        jButtonLoadTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadTargetActionPerformed(evt);
            }
        });

        jButtonCreateRelation.setText("Create Relation");
        jButtonCreateRelation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateRelationActionPerformed(evt);
            }
        });

        jButtonExecute.setText("Go");
        jButtonExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecuteActionPerformed(evt);
            }
        });

        jLabelSelectLatticeElement.setText("Select lattice element");

        jComboBoxSelectOperation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Operation", "Object Concept", "Attribute Concept", "Full Concept", "Implication Base", "All Implications" }));

        jCheckBoxSplit.setText("Split");

        jButtonLoadLattice.setText("Load Lattice");
        jButtonLoadLattice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadLatticeActionPerformed(evt);
            }
        });

        jLabelLatticePath.setName("jLabelLatticePath"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLoadSource, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLoadTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSourceFilePath)
                    .addComponent(jLabelTargetPath)
                    .addComponent(jButtonLoadLattice, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelLatticePath)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButtonCreateRelation, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboBoxSelectOperation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabelSelectLatticeElement, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(36, 36, 36)))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jCheckBoxSplit)
                                .addComponent(jComboBoxLatticeElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonLoadSource)
                        .addGap(1, 1, 1)
                        .addComponent(jLabelSourceFilePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadTarget)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTargetPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLoadLattice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelLatticePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCreateRelation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSelectLatticeElement)
                            .addComponent(jComboBoxLatticeElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxSelectOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxSplit))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonExecute)
                .addGap(0, 72, Short.MAX_VALUE))
        );

        jLabelLatticePath.getAccessibleContext().setAccessibleName("jLabelLatticePath");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadSourceActionPerformed

        File f = chooseFile();

        if (f != null) {
            source.clear();
            DefaultTableModel model = (DefaultTableModel) jTableRelation.getModel();
            model.setRowCount(0);
            jLabelSourceFilePath.setText(f.getAbsolutePath());
            try {
                File fXmlFile = f;
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(fXmlFile);

                doc.getDocumentElement().normalize();
                NodeList sourceList = doc.getElementsByTagName("title");
                for (int i = 0; i < sourceList.getLength(); i++) {
                    source.add(sourceList.item(i).getTextContent());
                }

            } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
                JOptionPane.showMessageDialog(this, "Wrong format", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Wrong file type. Choose xml file", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonLoadSourceActionPerformed

    private void jButtonLoadTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadTargetActionPerformed

        File f = chooseFile();

        if (f != null) {
            target.clear();
            jLabelTargetPath.setText(f.getAbsolutePath());
            try {
                File fXmlFile = f;
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(fXmlFile);
                doc.getDocumentElement().normalize();
                NodeList nList = doc.getElementsByTagName("title");
                for (int i = 0; i < nList.getLength(); i++) {
                    System.out.println(nList.item(i).getTextContent());
                    target.add(nList.item(i).getTextContent());
                }

            } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Wrong format", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Wrong file type. Choose xml file", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonLoadTargetActionPerformed

    private void jButtonCreateRelationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateRelationActionPerformed

        if (source.isEmpty() || target.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Source or Taget is empty", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        matrix = null;
        DefaultTableModel model = (DefaultTableModel) jTableRelation.getModel();
        model.setRowCount(source.size());
        model.setColumnCount(target.size() + 1);

        //--------initial table header data----------------
        JTableHeader th = jTableRelation.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        for (int i = 0; i <= target.size(); i++) {
            if (i == 0) {
                TableColumn tc = tcm.getColumn(i);
                tc.setHeaderValue("");
                th.repaint();
            } else {
                TableColumn tc = tcm.getColumn(i);
                tc.setHeaderValue(target.get(i - 1));
                th.repaint();
            }
        }
        //---------init row object--------------------
        for (int i = 0; i < source.size(); i++) {
            model.setValueAt(source.get(i), i, 0);
        }
        //---------init initial data 0 to relation-----
        for (int r = 0; r < source.size(); r++) {
            for (int c = 1; c <= target.size(); c++) {
                model.setValueAt(0, r, c);
            }
        }
    }//GEN-LAST:event_jButtonCreateRelationActionPerformed

    //-----------set relation data with user input--------------------------
    private void jTableRelationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRelationMouseClicked
        int row = jTableRelation.rowAtPoint(evt.getPoint());
        int col = jTableRelation.columnAtPoint(evt.getPoint());
        String selected_text = jComboBoxLatticeElement.getItemAt(jComboBoxLatticeElement.getSelectedIndex());
        DefaultTableModel model = (DefaultTableModel) jTableRelation.getModel();
        model.setValueAt(selected_text, row, col);
    }//GEN-LAST:event_jTableRelationMouseClicked

    private void jButtonExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecuteActionPerformed
        boolean isSplit = jCheckBoxSplit.isSelected();
        String selected_text = jComboBoxSelectOperation.getItemAt(jComboBoxSelectOperation.getSelectedIndex());
        if (selected_text.equals("Select Operation")) {
            JOptionPane.showMessageDialog(this, "Choose any operation first", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        readTable();

        if (matrix == null) {
            return;
        }

        CommonLattice commonLattice = new CommonLattice(noOfElements);
        commonLattice.setMeetArray(meetArray);
        commonLattice.setJoinArray(joinArray);
        commonLattice.setImplicationArray(implicationArray);

        int[][] inputMatrix = matrix;
        Relation inputRelation = new Relation(source.size(), target.size(), commonLattice);
        inputRelation.setMatrix(inputMatrix);
        inputRelation.setSource(source);
        inputRelation.setTarget(target);
        Relation result = null;

        switch (selected_text) {
            case "Object Concept":
                result = inputRelation.generateObjectConcept();
                break;
            case "Attribute Concept":
                result = inputRelation.generateAttributeConcept();
                break;
            case "Full Concept":
                result = inputRelation.generateFullConcept();
                break;
            case "Implication Base":
                result = inputRelation.generateCanonicalBase();
                break;
            case "All Implications":
                result = inputRelation.generateImplicationsUsingBase();
                break;
            default: {
                JOptionPane.showMessageDialog(this, "Choose any operation first", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (isSplit) {
            result = result.getEquivalence();
        }

        ShareResult.setResult(result);
        new ResultWindow().show();
        if (selected_text.equals("All Implications") || selected_text.equals("Implication Base")) {
            new ImplicationWindow().show();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonExecuteActionPerformed

    private void jButtonLoadLatticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadLatticeActionPerformed
        // TODO add your handling code here:
        ComboBoxModel[] models = null;
        String[] latticeElements = null;
        File f = chooseFile();

        if (f != null) {

            meetArray = null;
            joinArray = null;
            implicationArray = null;
            noOfElements = 0;
            models = null;
            latticeElements = null;
            jLabelLatticePath.setText(f.getAbsolutePath());
            try {
                File fXmlFile = f;
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(fXmlFile);
                doc.getDocumentElement().normalize();

                NodeList meetList = doc.getElementsByTagName("meet");
                NodeList joinList = doc.getElementsByTagName("join");
                NodeList implicationList = doc.getElementsByTagName("implication");
                NodeList elemList = doc.getElementsByTagName("elements");

                for (int i = 0; i < elemList.getLength(); i++) {
                    String s = elemList.item(i).getTextContent();
                    noOfElements = Integer.parseInt(s);
                }

                latticeElements = new String[noOfElements];
                for (int i = 0; i < noOfElements; i++) {
                    latticeElements[i] = String.valueOf(i);
                }

                models = new ComboBoxModel[1];
                models[0] = new DefaultComboBoxModel(latticeElements);
                jComboBoxLatticeElement.setModel(models[0]);
                meetArray = new int[noOfElements][noOfElements];
                joinArray = new int[noOfElements][noOfElements];
                implicationArray = new int[noOfElements][noOfElements];

                String[] meetRow = meetList.item(0).getTextContent().split(",");
                String[] joinRow = joinList.item(0).getTextContent().split(",");
                String[] implicationRow = implicationList.item(0).getTextContent().split(",");
                int start = 0;
                int end = noOfElements;
                for (int i = 0; i < noOfElements; i++) {
                    for (int j = start, k = 0; j < end; j++, k++) {
                        String meetElem = meetRow[j];
                        String joinElem = joinRow[j];
                        String implElem = implicationRow[j];

                        meetArray[i][k] = Integer.parseInt(meetElem);
                        joinArray[i][k] = Integer.parseInt(joinElem);
                        implicationArray[i][k] = Integer.parseInt(implElem);
                    }
                    start = start + noOfElements;
                    end = end + noOfElements;
                }

            } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
                e.printStackTrace();

            }
        } else {
            JOptionPane.showMessageDialog(this, "Wrong file type. Choose xml file", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonLoadLatticeActionPerformed


    
    public int[][] readTable() {

        DefaultTableModel model = (DefaultTableModel) jTableRelation.getModel();
        int row = model.getRowCount();
        int col = model.getColumnCount();
        if (row == 0 && col == 00) {
            JOptionPane.showMessageDialog(this, "Matrix Empty. Create Relation First.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        matrix = new int[row][col - 1];

        for (int i = 0; i < row; i++) {
            for (int j = 1; j < col; j++) {
                matrix[i][j - 1] = Integer.valueOf(model.getValueAt(i, j).toString());
                System.out.print(matrix[i][j - 1] + " ");
            }
            System.out.println();
        }

        return matrix;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreateRelation;
    private javax.swing.JButton jButtonExecute;
    private javax.swing.JButton jButtonLoadLattice;
    private javax.swing.JButton jButtonLoadSource;
    private javax.swing.JButton jButtonLoadTarget;
    private javax.swing.JCheckBox jCheckBoxSplit;
    private javax.swing.JComboBox<String> jComboBoxLatticeElement;
    private javax.swing.JComboBox<String> jComboBoxSelectOperation;
    private javax.swing.JLabel jLabelLatticePath;
    private javax.swing.JLabel jLabelSelectLatticeElement;
    private javax.swing.JLabel jLabelSourceFilePath;
    private javax.swing.JLabel jLabelTargetPath;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRelation;
    // End of variables declaration//GEN-END:variables

    private String getFileExtension(String filePath) {
        String extension = "";
        int i = filePath.lastIndexOf('.');
        if (i >= 0) {
            extension = filePath.substring(i + 1);
        }
        return extension;
    }

    private File chooseFile() {
        //-----load file browser---------------
        JFileChooser jfileChooser = new JFileChooser();
        jfileChooser.showOpenDialog(null);
        File f = jfileChooser.getSelectedFile();
        //-----end load file browser---------------
        //------check file empty-------------
        if (f == null) {
            return null;
        }
        //------------------- end check--------------
        //-----------Get file extension--------------
        String filePath = f.getAbsolutePath();
        String extension;
        extension = getFileExtension(filePath);
        if (extension.equals("xml")) {
            return f;
        } else {
            return null;
        }
        //---------End get file extension-------------    }
    }
}
