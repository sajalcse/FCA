/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fca.gui;

import com.fac.gui.helper.TableRenderer;
import com.fca.utility.ShareResult;
import com.fca.operations.Relation;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author susmi
 */
public class ResultWindow extends javax.swing.JFrame {

    /**
     * Creates new form ConceptWindow
     *
     * @param r
     */
    public ResultWindow() {
        initComponents();
        jTableResult.setShowGrid(true);
        jTableResult.setDefaultRenderer(Object.class, new TableRenderer());

        generateResultTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableResult = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableResult.setGridColor(new java.awt.Color(0, 204, 204));
        jScrollPane1.setViewportView(jTableResult);

        jMenu1.setText("File");

        jMenuItemSaveAs.setText("Save As");
        jMenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSaveAs);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    String generateUniqueFileName() {
        String filename = "";
        String datetime = new Date().toGMTString();
        datetime = datetime.replace(" ", "");
        datetime = datetime.replace(":", "");
        String rndchars = RandomStringUtils.randomAlphanumeric(16);
        filename = rndchars + "_" + datetime;
        return filename;
    }

    private void jMenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveAsActionPerformed

        String userHomeFolder = System.getProperty("user.home") + "\\" + generateUniqueFileName() + ".xlsx";
        final String FILE_NAME = userHomeFolder;
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Result");

        Relation result = ShareResult.getResult();
        ArrayList<String> source = result.getSource();
        ArrayList<String> target = result.getTarget();

        int[][] matrix = result.getMatrix();
        int rowNum = 0;

        for (int r = 0; r <= source.size(); r++) {
            Row row = sheet.createRow(rowNum++);
            int colNum = 0;
            for (int c = 0; c <= target.size(); c++) {
                Cell cell = row.createCell(colNum++);
                if (r == 0 && c > 0) {
                    cell.setCellValue(target.get(c - 1));
                } else if (r > 0 && c == 0) {
                    cell.setCellValue(source.get(r - 1));
                } else if (r > 0 && c > 0) {
                    cell.setCellValue(matrix[r - 1][c - 1]);
                }
            }
        }

        FileOutputStream outputStream = null;
        try {
            outputStream = new FileOutputStream(FILE_NAME);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ResultWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            workbook.write(outputStream);
        } catch (IOException ex) {
            Logger.getLogger(ResultWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            workbook.close();
        } catch (IOException ex) {
            Logger.getLogger(ResultWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Desktop.getDesktop().open(new File(FILE_NAME));
        } catch (IOException ex) {
            Logger.getLogger(ResultWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemSaveAsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResultWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableResult;
    // End of variables declaration//GEN-END:variables

    private void generateResultTable() {

        Relation result = ShareResult.getResult();
        ArrayList<String> source = result.getSource();
        ArrayList<String> target = result.getTarget();
        int[][] matrix = result.getMatrix();
        System.out.println(source.size());

        System.out.println(target.size());
        if (source.isEmpty() || target.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Source or Taget is empty", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTableResult.getModel();
        model.setRowCount(source.size());
        model.setColumnCount(target.size() + 1);

        //-------init header of result table---------------
        JTableHeader th = jTableResult.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        for (int i = 0; i <= target.size(); i++) {
            if (i == 0) {
                TableColumn tc = tcm.getColumn(i);
                tc.setHeaderValue("");
                th.repaint();
            } else {
                TableColumn tc = tcm.getColumn(i);
                tc.setHeaderValue(target.get(i - 1));
                th.repaint();
            }
        }

        //-------------init object name---------------------
        for (int i = 0; i < source.size(); i++) {
            model.setValueAt(source.get(i), i, 0);
        }

        //-----------fill up the result---------------------
        for (int r = 0; r < source.size(); r++) {
            for (int c = 1; c <= target.size(); c++) {
                model.setValueAt(String.valueOf(matrix[r][c - 1]), r, c);
            }
        }

    }
}
